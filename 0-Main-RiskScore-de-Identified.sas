*.................................................................................................;
*Risk Score buildup for ACA population by month.;

*Summary:
 - For the year of interest (2019) which is currently being submitted to CMS, we can get
	a feel for how the risk score is building up over time, month to month.
;
*Modificiation Log:
 - 2/25/19 - work on adding in a by provider output.

;

*Input Files:
 - Tables from Data submited to CMS (or from our Data Warehouse when we're not extracting data to CMS).

;

*Output File:
 - MEANS_OUT_ALL - This includes the average risk score by month, broken down into sources.
 - NDC_MAP_RXC_SUMMARY - This includes the number of RXC and NDC for that month.

;


*LIBRARIES .......................................................................................;

*Assign SAS library pointing to our Data Warehouse;
*Assign SAS libary point to our data extracted to CMS.;

*Macros and Varibles.;
*RUNQUIT MACRO TO STOP THINGS IF THERE'S AN ERROR;
%MACRO RUNQUIT;
	; RUN; QUIT;
	%if %eval(&syserr > 4) %THEN %DO;
		%ABORT CANCEL;
	%END;
%MEND RUNQUIT;

%LET MAIN_DIR = \Risk Scores Buildup\2019\;
%LET OUTDIR = &MAIN_DIR.OUTPUT\;
%LET CODEDIR = &MAIN_DIR.CODE\;
%LET INDIR = &MAIN_DIR.INPUT\;

LIBNAME OUTLIB "&OUTDIR.";

%LET OUTLIB = OUTLIB;


*Macro Variables .................................................................................;
*Update these based on the year of interest.;
%LET LAST_DAY = '31DEC2019'D;
%LET FIRST_DAY = '01JAN2019'D;
%LET CURYEAR = 2019;

%LET BegYMDnum = 20190101;
%LET EndYMDnum = 20191231;



*Import Necessary Files ..........................................................................;
*Import CSR File - needed for the HHS-HCC Risk Adjustment Model software;
*Straing forward CSV file, use PROC IMPORT;
PROC IMPORT
	OUT = &OUTLIB..IMPORT_CSR
	DATAFILE = "&INDIR.Import_CSR.csv"
	DBMS = CSV REPLACE;
	DELIMITER = ",";
	GETNAMES = YES;
	DATAROW = 2;
	GUESSINGROWS = 10000;
RUN;

*Import the NDC to RXC crosswalk.;
*More complicated CSV, use a DATA step to import and control the data types/formats.;
DATA &OUTLIB..NDC_RXC;
	INFILE "\Reference\Helpful Tables\Diag to HCC XWALKS\ACA\2018 Final DIY NDC RXC Crosswalk.CSV"
	delimiter = ',' MISSOVER DSD
 	lrecl=32767 firstobs=2 ;

	INFORMAT RXC BEST32.;
	INFORMAT RXC_LABEL $50.;
	INFORMAT NDC	$11.;

	FORMAT RXC BEST32.;
	FORMAT RXC_LABEL $50.;
	FORMAT NDC	$11.;

	INPUT
		RXC
		RXC_LABEL $
		NDC $
;%RUNQUIT;

*Import the HCPCS to RXC crosswalk.;
DATA &OUTLIB..HCPCS_RXC;
	INFILE "\Reference\Helpful Tables\Diag to HCC XWALKS\ACA\2018 Final DIY HCPCS RXC Crosswalk.CSV"
	delimiter = ',' MISSOVER DSD
 	lrecl=32767 firstobs=2 ;

	INFORMAT RXC BEST32.;
	INFORMAT RXC_LABEL $50.;
	INFORMAT HCPCS	$11.;

	FORMAT RXC BEST32.;
	FORMAT RXC_LABEL $50.;
	FORMAT HCPCS	$11.;

	INPUT
		RXC
		RXC_LABEL $
		HCPCS $
;%RUNQUIT;


*Create Datasets to run through RA model .........................................................;
*make some empty tables for DX, NDC, and HCPCS;
PROC SQL;
	CREATE TABLE &OUTLIB..HCPCS_EMPTY
		(
		IDVAR CHAR(20)
		,HCPCS CHAR(10)
		)
;%RUNQUIT;
PROC SQL;
	CREATE TABLE &OUTLIB..NDC_EMPTY
		(
		IDVAR CHAR(20)
		,NDC CHAR(12)
		)
;%RUNQUIT;
PROC SQL;
	CREATE TABLE &OUTLIB..DIAGNOSIS_EMPTY
		(
		IDVAR CHAR(20)
		,DIAGNOSIS_SERVICE_DATE NUM
		,DIAG CHAR(10)
		)
;%RUNQUIT;

*Person file .....................................................................................;
*Risk Adjustment model needs multiple tables as inputs including a table with the member
demographic information. Pull in info from data warehouse and manipulate.;

PROC SQL;
	CREATE TABLE &OUTLIB..PERSON_1 AS
		SELECT 	DISTINCT
				MEM.MASTER_MEM_ID
				,MEM.SEX_CD AS SEX
				,INPUT(PUT(DATEPART(MEM.BIRTH_DT), YYMMDDN8.), 8.)  AS DOB
				,DATEPART(MEM.BIRTH_DT) AS DOB_SAS FORMAT DATE9.
				,CASE WHEN PROD.HIX_METAL_DESC = 'Bronze' THEN 'B'
					  WHEN PROD.HIX_METAL_DESC = 'Bronze Limited CS' THEN 'B'
					  WHEN PROD.HIX_METAL_DESC = 'Bronze No CS' THEN 'B'
					  WHEN PROD.HIX_METAL_DESC = 'Catastrophic' THEN 'C'
					  WHEN PROD.HIX_METAL_DESC = 'Gold' THEN 'G'
					  WHEN PROD.HIX_METAL_DESC = 'Gold Limited CS' THEN 'G'
					  WHEN PROD.HIX_METAL_DESC = 'Gold No CS' THEN 'G'
					  WHEN PROD.HIX_METAL_DESC = 'Silver' THEN 'S'
					  WHEN PROD.HIX_METAL_DESC = 'Silver 73% CSR' THEN 'S'
					  WHEN PROD.HIX_METAL_DESC = 'Silver 87% CSR' THEN 'S'
					  WHEN PROD.HIX_METAL_DESC = 'Silver 94% CSR' THEN 'S'
					  WHEN PROD.HIX_METAL_DESC = 'Silver Limited CS' THEN 'S'
					  WHEN PROD.HIX_METAL_DESC = 'Silver No CS' THEN 'S'
					  WHEN PROD.HIX_METAL_DESC = 'Platinum' THEN 'P'
					  ELSE ""
					END AS METAL LABEL "METAL"
				,PROD.HIX_METAL_DESC AS METAL_DESC
			,EF.ELIG_DT_KEY AS START_DT
			,EF.REC_CNCL_DT_KEY AS END_DT
		FROM DW.ELIGIBILITY_FACT AS EF
		LEFT JOIN DW.ELIGIBILITY_DIM AS ED
			ON EF.ELIG_KEY = ED.ELIG_KEY
		LEFT JOIN DW.PRODUCT_DIM AS PROD
			ON EF.PROD_KEY = PROD.PROD_KEY
		LEFT JOIN DW.GROUP_SUBGRP_DIM AS GSD
			ON EF.GRP_SUBGRP_KEY = GSD.GRP_SUBGRP_KEY
		LEFT JOIN DW.MEMBER_DIM AS MEM
			ON MEM.MEM_KEY = EF.MEM_KEY
		LEFT JOIN DW.HIOS_DIM AS HIOS
			ON EF.HIOS_KEY = HIOS.HIOS_KEY
			WHERE ED.ELIG_IND EQ "Y"
		AND FLOOR(EF.REC_CNCL_DT_KEY/10000) GT &CURYEAR.
		AND EF.REC_CNCL_DT_KEY NE EF.ELIG_DT_KEY
		AND PROD.PROD_CAT_CD EQ "M"
		AND ((HIOS.METAL_DESC IS NOT NULL AND HIOS.METAL_CD NE "U") OR PROD.HIX_METAL_CD NE " " OR GSD.BUS_LINE EQ "Exchange")
		ORDER BY MEM.MASTER_MEM_ID
;%RUNQUIT;

*Manipulate the dates to use used later.;
DATA &OUTLIB..PERSON_2;
	SET &OUTLIB..PERSON_1;
	START_DT_SAS = INPUT(PUT(START_DT, 8.), YYMMDD10.);
	FORMAT START_DT_SAS DATE9.;
	END_DT_SAS = INPUT(PUT(END_DT, 8.), YYMMDD10.);
	FORMAT END_DT_SAS DATE9.;
%RUNQUIT;

*Using a date table, pull in some other date formats;
PROC SQL;
	CREATE TABLE &OUTLIB..PERSON_3 (DROP = DOB_SAS END_DT_SAS START_DT_SAS) AS
		SELECT 	DISTINCT
				PERS.*
				,FLOOR(YRDIF(PERS.DOB_SAS, &LAST_DAY., 'AGE')) AS AGE_LAST
				,(CASE WHEN DATEPART(THRU.DATE_VALUE) GT &LAST_DAY. THEN &LAST_DAY. ELSE DATEPART(THRU.DATE_VALUE) END)
					- (CASE WHEN DATEPART(FROM.DATE_VALUE) LT &FIRST_DAY. THEN &FIRST_DAY. ELSE DATEPART(FROM.DATE_VALUE) END)
				 AS DAYS
		FROM &OUTLIB..PERSON_2 AS PERS
		LEFT JOIN DW.DATE_DIM AS FROM
			ON PERS.START_DT = FROM.DT_KEY
		LEFT JOIN DW.DATE_DIM AS THRU
			ON PERS.END_DT = THRU.DT_KEY
;%RUNQUIT;

*Reset the days of enrollment if less than 0;
*Less than 0 days of enrollment means that the enrollment span was in the previous year.;
PROC SQL;
	CREATE TABLE &OUTLIB..PERSON_3B AS
		SELECT 	DISTINCT
				MASTER_MEM_ID AS IDVAR
				,SEX
				,DOB
				,START_DT
				,END_DT
				,AGE_LAST
				,METAL
				,METAL_DESC
				,CASE WHEN DAYS LT 0 THEN 0 ELSE DAYS END AS DAYS_RESET
		FROM &OUTLIB..PERSON_3
	ORDER BY IDVAR, END_DT DESC
;%RUNQUIT;

*Based on the number of days enrolled per member, calculate the number of months enrolled.;
*These days-to-months values are defined by the risk adjustment model.;
PROC SQL;
	CREATE TABLE &OUTLIB..PERSON_4 (DROP= SUM_DAYS) AS
		SELECT 	DISTINCT
				IDVAR
				,SEX
				,DOB
				,START_DT
				,END_DT
				,AGE_LAST
				,METAL
				,METAL_DESC
				,SUM(DAYS_RESET) AS SUM_DAYS
				,CASE 	WHEN CALCULATED SUM_DAYS GE 1 AND CALCULATED SUM_DAYS LE 31 THEN 1
						WHEN CALCULATED SUM_DAYS GE 32 AND CALCULATED SUM_DAYS LE 62 THEN 2
						WHEN CALCULATED SUM_DAYS GE 63 AND CALCULATED SUM_DAYS LE 92 THEN 3
						WHEN CALCULATED SUM_DAYS GE 93 AND CALCULATED SUM_DAYS LE 123 THEN 4
						WHEN CALCULATED SUM_DAYS GE 124 AND CALCULATED SUM_DAYS LE 153 THEN 5
						WHEN CALCULATED SUM_DAYS GE 154 AND CALCULATED SUM_DAYS LE 184 THEN 6
						WHEN CALCULATED SUM_DAYS GE 185 AND CALCULATED SUM_DAYS LE 214 THEN 7
						WHEN CALCULATED SUM_DAYS GE 215 AND CALCULATED SUM_DAYS LE 245 THEN 8
						WHEN CALCULATED SUM_DAYS GE 246 AND CALCULATED SUM_DAYS LE 275 THEN 9
						WHEN CALCULATED SUM_DAYS GE 276 AND CALCULATED SUM_DAYS LE 306 THEN 10
						WHEN CALCULATED SUM_DAYS GE 307 AND CALCULATED SUM_DAYS LE 335 THEN 11
						WHEN CALCULATED SUM_DAYS GE 336 AND CALCULATED SUM_DAYS LE 366 THEN 12
						WHEN CALCULATED SUM_DAYS GE 366 THEN 12
				ELSE 0
				END AS ENROLDURATION
		FROM &OUTLIB..PERSON_3B
		GROUP BY IDVAR
		ORDER BY IDVAR, END_DT DESC
;%RUNQUIT;

*sort and get only 1 record per member.;
PROC SORT DATA = &OUTLIB..PERSON_4 NODUPKEY
	OUT = &OUTLIB..PERSON_5;
	BY IDVAR
;%RUNQUIT;

*Crosswalk to CSR value - needed for the risk adjustment model.;
PROC SQL;
	CREATE TABLE &OUTLIB..PERSON_6 AS
		SELECT	DISTINCT
				PERS.IDVAR
				,PERS.SEX
				,PERS.DOB
				,PERS.AGE_LAST
				,PERS.METAL
				,PERS.START_DT
				,PERS.END_DT
				,PERS.ENROLDURATION
				,PERS.METAL_DESC
				,CSR.CSR_INDICATOR
		FROM &OUTLIB..PERSON_5 AS PERS
		LEFT JOIN &OUTLIB..IMPORT_CSR AS CSR
			ON CSR.CUBE_NAME = PERS.METAL_DESC
	ORDER BY IDVAR, END_DT DESC
;%RUNQUIT;

*sort and keep only one record per member.;
PROC SORT DATA = &OUTLIB..PERSON_6 NODUPKEY
	OUT = &OUTLIB..PERSON_7;
	BY IDVAR SEX DOB METAL_DESC
;%RUNQUIT;

*sort;
PROC SORT DATA = &OUTLIB..PERSON_7
	OUT = &OUTLIB..PERSON_8;
	BY IDVAR SEX DOB DESCENDING START_DT DESCENDING END_DT
;%RUNQUIT;

*sort and take only one record per member.;
PROC SORT DATA = &OUTLIB..PERSON_8 NODUPKEY
	OUT = &OUTLIB..PERSON_9;
	BY IDVAR SEX DOB METAL
;%RUNQUIT;

*final person table needed as input to the risk adjustment model.;
PROC SQL;
	CREATE TABLE &OUTLIB..PERSON_MASTER AS
		SELECT 	DISTINCT
				PERS.IDVAR LABEL = 'IDVAR'
				,PERS.SEX
				,PERS.DOB
				,PERS.AGE_LAST LABEL = 'AGE_LAST'
				,PERS.METAL LABEL = 'METAL'
				,PERS.CSR_INDICATOR
				,PERS.ENROLDURATION LABEL = 'ENROLDURATION'
		FROM &OUTLIB..PERSON_9 AS PERS
;%RUNQUIT;


*Diagnosis Dataset ...............................................................................;
*Pull in member diagnosis code information from our data warehouse and filter to only be for those
members who are also present in the above Person Table.;
PROC SQL;
	CREATE TABLE &OUTLIB..DIAGNOSIS_MASTER_1 AS
		SELECT 	DISTINCT
				CF.CLAIM_ID
				,CF.CLAIM_KEY
				,CF.HDR_IND
				,MEM.MASTER_MEM_ID
				,COMPRESS(HOSP.FACL_TYPE_CD)||COMPRESS(HOSP.BILL_CLASS_CD)||COMPRESS(HOSP.BILL_FREQ_CD) AS BILL_TYPE_CD LABEL "BILL_TYPE_CD"
				,COMPRESS(HOSP.FACL_TYPE_CD) AS FACL_TYPE_CD LABEL "FACL_TYPE_CD"
				,COMPRESS(HOSP.BILL_CLASS_CD) AS BILL_CLASS_CD LABEL "BILL_CLASS_CD"
				,COMPRESS(HOSP.BILL_FREQ_CD) AS BILL_FREQ_CD LABEL "BILL_FREQ_CD"
				,CASE	 WHEN CF.SERV_FROM_DT_KEY LT &BegYMDnum. THEN &BegYMDnum.
						ELSE CF.SERV_FROM_DT_KEY
					END AS SERV_FROM_DT_KEY
				,CF.SERV_TO_DT_KEY
		FROM DW.CLAIM_FACT AS CF
		LEFT JOIN DW.CLAIM_IND_DIM AS CID
			ON CF.CLAIM_IND_KEY = CID.CLAIM_IND_KEY
		LEFT JOIN DW.HOSPITAL_DIM AS HOSP
			ON CF.HOSPITAL_KEY = HOSP.HOSPITAL_KEY
		LEFT JOIN DW.SERVICE_DIM AS SERV
			ON SERV.SERV_KEY = CF.SERV_KEY
		LEFT JOIN DW.PRODUCT_DIM AS PROD
			ON CF.PROD_KEY = PROD.PROD_KEY
		LEFT JOIN DW.MEMBER_DIM AS MEM
			ON CF.MEM_KEY = MEM.MEM_KEY
		WHERE (CF.SERV_FROM_DT_KEY GE &BegYMDnum. OR CF.SERV_TO_DT_KEY GE &BegYMDnum.)
				AND CF.SERV_FROM_DT_KEY LE &EndYMDnum.
		AND CID.CLAIM_HDR_DENY_IND = "N"
		AND PROD.PROD_CAT_CD = "M"
		AND COMPRESS(HOSP.BILL_FREQ_CD) NE "8"
;%RUNQUIT;

PROC SQL;
	CREATE TABLE &OUTLIB..DIAGNOSIS_MASTER_2 AS
		SELECT *
		FROM &OUTLIB..DIAGNOSIS_MASTER_1 AS DM1
		INNER JOIN
		&OUTLIB..PERSON_MASTER AS PERS
			ON DM1.MASTER_MEM_ID = PERS.IDVAR
;%RUNQUIT;

*Get claim line information from Facets.;
PROC SQL;
	CREATE TABLE &OUTLIB..DIAGNOSIS_MASTER AS
		SELECT DISTINCT
			DM2.MASTER_MEM_ID AS IDVAR
			,LINE.CLCL_ID AS CLAIM_ID LABEL "CLAIM_ID"
			,DM2.SERV_TO_DT_KEY AS DIAGNOSIS_SERVICE_DATE
			,LINE.IPCD_ID AS PROC_CD LABEL "PROC_CD"
			,LINE.IDCD_ID AS DIAG LABEL "DIAG"
		FROM &OUTLIB..DIAGNOSIS_MASTER_2 AS DM2
		LEFT JOIN FACETS.CMC_CDML_CL_LINE AS LINE
			ON DM2.CLAIM_ID = LINE.CLCL_ID
;%RUNQUIT;

*NDC Dataset......................................................................................;
*Pull in pharmacy NDC Codes from our data warehouse as needed by the risk adjustment model
and keep only those records for members in the above PERSON table.;
PROC SQL;
	CREATE TABLE &OUTLIB..NDC_MASTER AS
		SELECT 	DISTINCT
				PERS.IDVAR
				,RX.CLAIM_ID
				,RX.DRUG_KEY
				,RX.RXFILLEDDATEKEY AS DIAGNOSIS_SERVICE_DATE
				,DD.NDC_CODE AS NDC
		FROM DW.RXCLAIMLINE_FACT AS RX
		LEFT JOIN DW.DRUG_DIM AS DD
			ON RX.DRUG_KEY EQ DD.DRUG_KEY
		LEFT JOIN DW.MEMBER_DIM AS MEM
			ON RX.MEM_KEY EQ MEM.MEM_KEY
		INNER JOIN &OUTLIB..PERSON_MASTER AS PERS
			ON PERS.IDVAR EQ MEM.MASTER_MEM_ID
		WHERE RX.RXFILLEDDATEKEY GE &BegYMDnum.
		AND RX.RXFILLEDDATEKEY LE &EndYMDnum.
	ORDER BY PERS.IDVAR, RX.CLAIM_ID
;%RUNQUIT;


*HCPCS Dataset....................................................................................;
*Inpatient, outpatient, and professional claims are acceptable sources of HCPCS codes.;
*This is limited to the ADULT model only. DO NOT include child and infant enrollees in the HCPCS dataset.;
*Pull in HCPCS codes from medical claims for the members who are in the above Person Table.;
PROC SQL;
	CREATE TABLE &OUTLIB..HCPCS_MASTER AS
		SELECT 	DISTINCT
				IDVAR
				,CLAIM_ID
				,PROC_CD AS HCPCS
				,DIAGNOSIS_SERVICE_DATE
		FROM &OUTLIB..DIAGNOSIS_MASTER
	ORDER BY IDVAR, CLAIM_ID, PROC_CD
;%RUNQUIT;


*Macro Functions .................................................................................;
*create a macro function to run the following for each month in the year of interest (and any run-out);
*This macro creates the tables needed in the following Macro.;
%MACRO FILES(YMD);
	%DO;
	PROC SQL;
		CREATE TABLE &OUTLIB..DIAGNOSIS_MON_MASTER AS
			SELECT 	IDVAR
					,DIAG
					,20181231 AS DIAGNOSIS_SERVICE_DATE /*The risk adjustment model is technically for 2018. The 2019 model hasn't been released
																						so the date of service needs to be in 2018 otherwise evertyhing will be rejected.*/
			FROM &OUTLIB..DIAGNOSIS_MASTER
			WHERE DIAGNOSIS_SERVICE_DATE LT &YMD.
	;%RUNQUIT;

	PROC SQL;
		CREATE TABLE &OUTLIB..NDC_MON_MASTER AS
			SELECT *
			FROM &OUTLIB..NDC_MASTER
			WHERE DIAGNOSIS_SERVICE_DATE LT &YMD.
	%RUNQUIT;

	PROC SQL;
		CREATE TABLE &OUTLIB..HCPCS_MON_MASTER AS
			SELECT *
			FROM &OUTLIB..HCPCS_MASTER
			WHERE DIAGNOSIS_SERVICE_DATE LT &YMD.
	;%RUNQUIT;

%END;
%MEND FILES;



%MACRO MODEL(YMD);
	%DO;
*Run a variety of combinations of medical diagnosis, medical HCPCS, pharmacy NDC, and demogrphic tables to get the values that each contributes.;
	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;
	*All: demo, dx, hcpcs, and ndc.;
	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;

	%LET DIAG = &OUTLIB..DIAGNOSIS_MON_MASTER;
	%LET NDC = &OUTLIB..NDC_MON_MASTER;
	%LET HCPCS = &OUTLIB..HCPCS_MON_MASTER;

	*shouted like "RELEASE THE KRACKIN": RUN THE MODEL!;
	*this model code is something released by CMS and is available on their website.;
	%INCLUDE "&CODEDIR.1-V0518 128 O2.SAS" ;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_WITH_ALL AS
			SELECT *
			FROM &OUTLIB..OUTPUT_SCORES
	;%RUNQUIT;

	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;
	*DX only: demo and dx.;
	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;

	%LET DIAG = &OUTLIB..DIAGNOSIS_MON_MASTER;
	%LET NDC = &OUTLIB..NDC_EMPTY;
	%LET HCPCS = &OUTLIB..HCPCS_EMPTY;

	*shouted like "RELEASE THE KRACKIN": RUN THE MODEL!;
	%INCLUDE "&CODEDIR.1-V0518 128 O2.SAS" ;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_WITHOUT_NDC_HCPCS AS
			SELECT *
			FROM &OUTLIB..OUTPUT_SCORES
	;%RUNQUIT;

	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;
	*DEMO only: demo.;
	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;

	%LET DIAG = &OUTLIB..DIAGNOSIS_EMPTY;
	%LET NDC = &OUTLIB..NDC_EMPTY;
	%LET HCPCS = &OUTLIB..HCPCS_EMPTY;

	*shouted like "RELEASE THE KRACKIN": RUN THE MODEL!;
	%INCLUDE "&CODEDIR.1-V0518 128 O2.SAS" ;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_DEMO AS
			SELECT *
			FROM &OUTLIB..OUTPUT_SCORES
	;%RUNQUIT;

	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;
	*HCPCS: demo and hcpcs.;
	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;

	%LET DIAG = &OUTLIB..DIAGNOSIS_EMPTY;
	%LET NDC = &OUTLIB..NDC_EMPTY;
	%LET HCPCS = &OUTLIB..HCPCS_MON_MASTER;

	*shouted like "RELEASE THE KRACKIN": RUN THE MODEL!;
	%INCLUDE "&CODEDIR.1-V0518 128 O2.SAS" ;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_HCPCS AS
			SELECT *
			FROM &OUTLIB..OUTPUT_SCORES
	;%RUNQUIT;

	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;
	*NDC: demo and ndc.;
	*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;

	%LET DIAG = &OUTLIB..DIAGNOSIS_EMPTY;
	%LET NDC = &OUTLIB..NDC_MON_MASTER;
	%LET HCPCS = &OUTLIB..HCPCS_EMPTY;

	*shouted like "RELEASE THE KRACKIN": RUN THE MODEL!;
	%INCLUDE "&CODEDIR.1-V0518 128 O2.SAS" ;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_NDC AS
			SELECT *
			FROM &OUTLIB..OUTPUT_SCORES
	;%RUNQUIT;

	*get the right risk score;
	*the model outputs all sorts of risk scores for a member but we need to pick the right one from the bunch.;
	*Do this for each combination ran above.;
	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_WITHOUT_NDC_HCPCS_FINAL AS
			SELECT 	IDVAR
					,SEX
					,DOB
					,AGE_LAST
					,METAL
					,CSR_INDICATOR
					,ENROLDURATION
					,CASE 	WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_ADULT_CATASTROPHIC
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_ADULT_CATASTROPHIC

							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_INFANT_CATASTROPHIC
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_INFANT_CATASTROPHIC

							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_CHILD_CATASTROPHIC
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_CHILD_CATASTROPHIC

							END AS RISK_SCORE
				FROM &OUTLIB..OUTPUT_WITHOUT_NDC_HCPCS
	;%RUNQUIT;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_WITH_ALL_FINAL AS
			SELECT 	IDVAR
					,SEX
					,DOB
					,AGE_LAST
					,METAL
					,CSR_INDICATOR
					,ENROLDURATION
					,CASE 	WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_ADULT_CATASTROPHIC
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_ADULT_CATASTROPHIC

							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_INFANT_CATASTROPHIC
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_INFANT_CATASTROPHIC

							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_CHILD_CATASTROPHIC
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_CHILD_CATASTROPHIC

							END AS RISK_SCORE
				FROM &OUTLIB..OUTPUT_WITH_ALL
	;%RUNQUIT;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_DEMO_FINAL AS
			SELECT 	IDVAR
					,SEX
					,DOB
					,AGE_LAST
					,METAL
					,CSR_INDICATOR
					,ENROLDURATION
					,CASE 	WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_ADULT_CATASTROPHIC
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_ADULT_CATASTROPHIC

							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_INFANT_CATASTROPHIC
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_INFANT_CATASTROPHIC

							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_CHILD_CATASTROPHIC
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_CHILD_CATASTROPHIC

							END AS RISK_SCORE
				FROM &OUTLIB..OUTPUT_DEMO
	;%RUNQUIT;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_NDC_FINAL AS
			SELECT 	IDVAR
					,SEX
					,DOB
					,AGE_LAST
					,METAL
					,CSR_INDICATOR
					,ENROLDURATION
					,CASE 	WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_ADULT_CATASTROPHIC
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_ADULT_CATASTROPHIC

							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_INFANT_CATASTROPHIC
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_INFANT_CATASTROPHIC

							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_CHILD_CATASTROPHIC
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_CHILD_CATASTROPHIC

							END AS RISK_SCORE
				FROM &OUTLIB..OUTPUT_NDC
	;%RUNQUIT;

	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_HCPCS_FINAL AS
			SELECT 	IDVAR
					,SEX
					,DOB
					,AGE_LAST
					,METAL
					,CSR_INDICATOR
					,ENROLDURATION
					,CASE 	WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_ADULT_CATASTROPHIC
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_ADULT_PLATINUM
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_ADULT_GOLD
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_ADULT_SILVER
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_ADULT_BRONZE
							WHEN (AGE_LAST GT 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_ADULT_CATASTROPHIC

							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_INFANT_CATASTROPHIC
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_INFANT_PLATINUM
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_INFANT_GOLD
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_INFANT_SILVER
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_INFANT_BRONZE
							WHEN (AGE_LAST LT 2 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_INFANT_CATASTROPHIC

							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'P') THEN SCORE_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'G') THEN SCORE_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'S') THEN SCORE_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'B') THEN SCORE_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR EQ 0 AND METAL EQ 'C') THEN SCORE_CHILD_CATASTROPHIC
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'P') THEN CSR_ADJ_SCR_CHILD_PLATINUM
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'G') THEN CSR_ADJ_SCR_CHILD_GOLD
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'S') THEN CSR_ADJ_SCR_CHILD_SILVER
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'B') THEN CSR_ADJ_SCR_CHILD_BRONZE
							WHEN (AGE_LAST GE 2 AND AGE_LAST LE 20 AND CSR_INDICATOR GT 0 AND METAL EQ 'C') THEN CSR_ADJ_SCR_CHILD_CATASTROPHIC

							END AS RISK_SCORE
				FROM &OUTLIB..OUTPUT_HCPCS
	;%RUNQUIT;

	*see a difference;
	*now that we have the risk scores associated with each combination, calculated the differences between them so we can graph that in Excel.;
	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_DIFF_&YMD. AS
			SELECT 	ONE.IDVAR
					,ONE.SEX
					,ONE.DOB
					,ONE.AGE_LAST
					,ONE.CSR_INDICATOR
					,ONE.ENROLDURATION
					,ONE.RISK_SCORE AS RISK_SCORE_ALL
					,TWO.RISK_SCORE AS RISK_SCORE_ONLY_DX
					,THREE.RISK_SCORE AS RISK_SCORE_DEMO
					,FOUR.RISK_SCORE AS RISK_SCORE_NDC
					,FIVE.RISK_SCORE AS RISK_SCORE_HCPCS
					,ONE.RISK_SCORE - TWO.RISK_SCORE AS DIFF_RISK_SCORE
					,ONE.RISK_SCORE - THREE.RISK_SCORE AS DIFF_RISK_SCORE_2
			FROM &OUTLIB..OUTPUT_WITH_ALL_FINAL AS ONE
			LEFT JOIN &OUTLIB..OUTPUT_WITHOUT_NDC_HCPCS_FINAL AS TWO
				ON ONE.IDVAR = TWO.IDVAR
			LEFT JOIN &OUTLIB..OUTPUT_DEMO_FINAL AS THREE
				ON ONE.IDVAR = THREE.IDVAR
			LEFT JOIN &OUTLIB..OUTPUT_NDC_FINAL AS FOUR
				ON ONE.IDVAR = FOUR.IDVAR
			LEFT JOIN &OUTLIB..OUTPUT_HCPCS_FINAL AS FIVE
				ON ONE.IDVAR = FIVE.IDVAR
			ORDER BY ONE.IDVAR
	;%RUNQUIT;

 *find the mean value;
	PROC MEANS DATA = &OUTLIB..OUTPUT_DIFF_&YMD. NOPRINT MEAN MAXDEC = 2; /*OUTPUTS MEAN WITH A MAXIMUM DECIMAL PLACE OF 2*/
		VAR RISK_SCORE_ALL RISK_SCORE_DEMO RISK_SCORE_ONLY_DX RISK_SCORE_NDC RISK_SCORE_HCPCS;
		OUTPUT OUT = &OUTLIB..MEANS_OUT_&YMD.;
	%RUNQUIT;

	*Pull in Primary Care Provider (PCP) information from our data warehouse ;
	PROC SQL;
		CREATE TABLE &OUTLIB..OUTPUT_PCP_&YMD. AS
			SELECT 	OUTPUT.IDVAR
					,PCP.LAST_NAME
					,PCP.FIRST_NAME
					,STRIP(PCP.LAST_NAME) || ", " || STRIP(PCP.FIRST_NAME) AS MEMBER_NAME
					,OUTPUT.SEX
					,OUTPUT.DOB
					,OUTPUT.CSR_INDICATOR
					,OUTPUT.ENROLDURATION
					,OUTPUT.RISK_SCORE_ALL
					,OUTPUT.RISK_SCORE_DEMO
					,OUTPUT.RISK_SCORE_ONLY_DX
					,OUTPUT.RISK_SCORE_NDC
					,OUTPUT.RISK_SCORE_HCPCS
					,PCP.FINAL_GRP_TIN
					,PCP.FINAL_PCP_GRP_NAME
					,PCP.FINAL_TIN
					,PCP.FINAL_PCP
					,PCP.FINAL_PCP_NAME
					,PCP.FINAL_PCP_IPA_NO
					,PCP.FINAL_PCP_IPA_NAME
					,PCP.ASSIGNMENT
			FROM &OUTLIB..OUTPUT_DIFF_&YMD. AS OUTPUT
			LEFT JOIN DW.PCP_FINAL AS PCP
				ON OUTPUT.IDVAR EQ PCP.MASTER_MEM_ID
				AND PCP.YEARMONTH EQ PUT(FLOOR(&YMD./100), 6.)
			WHERE PCP.LAST_NAME IS NOT NULL
			AND PCP.FINAL_PCP_NAME NE 'No PCP Selected, PCP'
			AND PCP.FINAL_GRP_TIN IS NOT NULL
			ORDER BY OUTPUT.IDVAR
	;%RUNQUIT;

 *makes the statistics to use later ... maybe.;
	PROC SQL;
		CREATE TABLE &OUTLIB..PROVIDER_GROUPS_&YMD. AS
			SELECT 	DISTINCT
					FINAL_PCP_GRP_NAME
					,FINAL_PCP_IPA_NAME
					,COUNT(DISTINCT IDVAR) AS NUM_MEMBERS
					,MEAN(RISK_SCORE_ALL) AS AVG_RISK_SCORE
					,MEAN(RISK_SCORE_DEMO) AS AVG_RISK_SCORE_DEMO
					,MEAN(RISK_SCORE_ONLY_DX) AS AVG_RISK_SCORE_DX
					,MEAN(RISK_SCORE_NDC) AS AVG_RISK_SCORE_NDC
					,MEAN(RISK_SCORE_HCPCS) AS AVG_RISK_SCORE_HCPCS
			FROM &OUTLIB..OUTPUT_PCP_&YMD.
			WHERE FINAL_PCP_GRP_NAME IS NOT NULL
			GROUP BY FINAL_PCP_GRP_NAME, FINAL_PCP_IPA_NAME
			HAVING COUNT(DISTINCT IDVAR) GE 100
	;%RUNQUIT;

%END;
%MEND MODEL;

*Run Macro Functions for each Month...............................................................;
*uncomment as the year goes on.;
ODS EXCLUDE ALL;
%FILES(20190201);
%MODEL(20190201);

%FILES(20190301);
%MODEL(20190301);

%FILES(20190401);
%MODEL(20190401);

/*%FILES(20190501);*/
/*%MODEL(20190501);*/
/**/
/*%FILES(20190601);*/
/*%MODEL(20190601);*/
/**/
/*%FILES(20190701);*/
/*%MODEL(20190701);*/
/**/
/*%FILES(20190801);*/
/*%MODEL(20190801);*/
/**/
/*%FILES(20190901);*/
/*%MODEL(20190901);*/
/**/
/*%FILES(20191001);*/
/*%MODEL(20191001);*/
/**/
/*%FILES(20191101);*/
/*%MODEL(20191101);*/
/**/
/*%FILES(20191201);*/
/*%MODEL(20191201);*/
/**/
/*%FILES(20200101);*/
/*%MODEL(20200101);*/
/**/
/*%FILES(20200201);*/
/*%MODEL(20200201);*/

ODS EXCLUDE NONE;

*Put the mean values together in one table, uncomment as the year goes on.;
PROC SQL;
	CREATE TABLE &OUTLIB..MEANS_OUT_ALL AS
		SELECT	20190201 AS MONTH
				,RISK_SCORE_DEMO
				,RISK_SCORE_ALL
				,RISK_SCORE_NDC
				,RISK_SCORE_HCPCS
				,RISK_SCORE_ONLY_DX
		FROM &OUTLIB..MEANS_OUT_20190201
		WHERE _STAT_ EQ 'MEAN'
		UNION
		SELECT	20190301 AS MONTH
				,RISK_SCORE_DEMO
				,RISK_SCORE_ALL
				,RISK_SCORE_NDC
				,RISK_SCORE_HCPCS
				,RISK_SCORE_ONLY_DX
		FROM &OUTLIB..MEANS_OUT_20190301
		WHERE _STAT_ EQ 'MEAN'
		UNION
		SELECT	20190401 AS MONTH
				,RISK_SCORE_DEMO
				,RISK_SCORE_ALL
				,RISK_SCORE_NDC
				,RISK_SCORE_HCPCS
				,RISK_SCORE_ONLY_DX
		FROM &OUTLIB..MEANS_OUT_20190401
		WHERE _STAT_ EQ 'MEAN'
/*		UNION */
/*		SELECT	20180501 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20180501*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20180601 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20180601*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20180701 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20180701*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20180801 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20180801*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20180901 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20180901*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20181001 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20181001*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20181101 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20181101*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20181201 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20181201*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20190101 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20190101*/
/*		WHERE _STAT_ EQ 'MEAN'*/
/*		UNION */
/*		SELECT	20190201 AS MONTH*/
/*				,RISK_SCORE_DEMO*/
/*				,RISK_SCORE_ALL*/
/*				,RISK_SCORE_NDC*/
/*				,RISK_SCORE_HCPCS*/
/*				,RISK_SCORE_ONLY_DX*/
/*		FROM &OUTLIB..MEANS_OUT_20190201*/
/*		WHERE _STAT_ EQ 'MEAN'*/
;%RUNQUIT;

*export this data. Since it's fairly straight forward just use PROC EXPORT.;
PROC EXPORT DATA = &OUTLIB..MEANS_OUT_ALL
	OUTFILE = "&MAIN_DIR.MEANS_OUT_ALL.CSV"
	DBMS = CSV REPLACE
;%RUNQUIT;

*same with the Provider information.;
PROC SQL;
	CREATE TABLE &OUTLIB..PROVIDER_GROUPS AS
		SELECT 	201902 AS YEARMONTH
				,*
		FROM &OUTLIB..PROVIDER_GROUPS_20190201
		UNION
		SELECT 	201903 AS YEARMONTH
				,*
		FROM &OUTLIB..PROVIDER_GROUPS_20190301
		UNION
		SELECT 	201904 AS YEARMONTH
				,*
		FROM &OUTLIB..PROVIDER_GROUPS_20190401
		ORDER BY FINAL_PCP_GRP_NAME, YEARMONTH
;%RUNQUIT;

PROC EXPORT DATA = &OUTLIB..PROVIDER_GROUPS
	OUTFILE = "&MAIN_DIR.PROVIDER_GROUPS.CSV"
	DBMS = CSV REPLACE
;%RUNQUIT;
